{"id":"js/main.js","dependencies":[],"generated":{"js":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n/**\r\n * \r\n *  OVERVIEW\r\n * \r\n *  Async Await is a more elegant way to handle responses\r\n *  It's not a way to write the functions for them so  \r\n *  createPost() remains the same \r\n * \r\n */\n// Init array to store posts\nvar posts = [];\n/**\r\n * \r\n *  EXACTLY SAME CODE AS BEFORE (PROMISES)\r\n * \r\n *  1) Loops thru posts[] grabbing its properties\r\n *  2) Stores each post to output\r\n *  3) Dom renders renders HTML output to screen\r\n * \r\n */\n\nfunction getPosts() {\n  var output = \"\";\n  setTimeout(function () {\n    posts.forEach(function (post) {\n      output += \"<li>\\n          <span>\\n            \".concat(post.title, \"\\n          </span><BR>\\n          \").concat(post.body, \"<BR>\\n          </li>\");\n    });\n    document.querySelector('#posts').innerHTML = output;\n  }, 1000);\n}\n/**\r\n *  \r\n *  EXACTLY SAME CODE AS BEFORE (PROMISES)\r\n * \r\n *  Writing Async / Await functions remain the same\r\n *  Only the way we handle the response changes\r\n *  \r\n */\n\n\nfunction createPost(post) {\n  return new Promise(function (resolve, reject) {\n    setTimeout(function () {\n      posts.push(post);\n      var error = true;\n\n      if (!error) {\n        resolve();\n      } else {\n        reject('something went wrong');\n      }\n    }, 2000);\n  });\n}\n/**\r\n *  \r\n *  ASYNC / AWAIT \r\n * \r\n *  1) async and await are used together\r\n *  2) async keyword is required in front of a function declaration to turn it into an async function\r\n *  3) await waits for an asynchronous process to complete \r\n *  4) then() nolonger is chained like it is for a promise\r\n * \r\n */\n\n\nfunction init() {\n  return _init.apply(this, arguments);\n}\n\nfunction _init() {\n  _init = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return createPost({\n              title: 'Post One',\n              body: 'This is post one'\n            }) // Traversy never used the catch but it appears they can be used together\n            .catch(function (e) {\n              return console.error('Error: ' + e);\n            });\n\n          case 2:\n            getPosts();\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _init.apply(this, arguments);\n}\n\ninit(); // createPost({ title: 'Post Seven', body: 'This is post seven' } )\n//   .then( getPosts )\n//   .catch( e => console.error( Error(e) ));\n\n/**\r\n *  PART 2: Promise.all( [promise1, promise2, etc.] ) \r\n * \r\n *  Accepts an array\r\n */\n//  const promise1 = Promise.resolve('Hello World');\n//  const promise2 = 12345;\n//  const promise3 = new Promise( (resolve, reject) => setTimeout(resolve, 3250, 'Adios Amigo!') );\n\n/**\r\n *  PART 4: fetch()\r\n * \r\n *  res is common shorthand for response\r\n * \r\n *  IMPORTANT: fetch alone only returns info about the function that is used\r\n *  to format JSON. It still works but doesn't return the info we're after\r\n *  To parse it to be readable we must chani .then()\r\n * \r\n */\n//  const promise4 = fetch\n//     ('https://jsonplaceholder.typicode.com/users')\n//         .then(  res => res.json() );\n//  // Takes however long the longest promise is to return all the values which is 3250\n//  Promise.all([ promise1, promise2, promise3, promise4 ])\n//   .then( (values) => console.log(values));\n\n/**\r\n *  PART 4: fetch\r\n * \r\n *  Need to chain 2 fetches in a row to use fetch\r\n */"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":5,"column":0},"source":"js/main.js","original":{"line":1,"column":0}},{"generated":{"line":14,"column":0},"source":"js/main.js","original":{"line":11,"column":0}},{"generated":{"line":15,"column":0},"source":"js/main.js","original":{"line":12,"column":0}},{"name":"posts","generated":{"line":15,"column":4},"source":"js/main.js","original":{"line":12,"column":6}},{"generated":{"line":15,"column":9},"source":"js/main.js","original":{"line":12,"column":11}},{"generated":{"line":15,"column":12},"source":"js/main.js","original":{"line":12,"column":14}},{"generated":{"line":15,"column":14},"source":"js/main.js","original":{"line":12,"column":0}},{"generated":{"line":16,"column":0},"source":"js/main.js","original":{"line":14,"column":0}},{"generated":{"line":26,"column":0},"source":"js/main.js","original":{"line":24,"column":0}},{"name":"getPosts","generated":{"line":26,"column":9},"source":"js/main.js","original":{"line":24,"column":9}},{"generated":{"line":26,"column":17},"source":"js/main.js","original":{"line":24,"column":0}},{"generated":{"line":26,"column":20},"source":"js/main.js","original":{"line":24,"column":20}},{"generated":{"line":27,"column":0},"source":"js/main.js","original":{"line":25,"column":2}},{"name":"output","generated":{"line":27,"column":6},"source":"js/main.js","original":{"line":25,"column":6}},{"generated":{"line":27,"column":12},"source":"js/main.js","original":{"line":25,"column":12}},{"generated":{"line":27,"column":17},"source":"js/main.js","original":{"line":25,"column":2}},{"name":"setTimeout","generated":{"line":28,"column":0},"source":"js/main.js","original":{"line":26,"column":2}},{"name":"setTimeout","generated":{"line":28,"column":2},"source":"js/main.js","original":{"line":26,"column":2}},{"generated":{"line":28,"column":12},"source":"js/main.js","original":{"line":26,"column":12}},{"generated":{"line":28,"column":13},"source":"js/main.js","original":{"line":26,"column":14}},{"generated":{"line":28,"column":25},"source":"js/main.js","original":{"line":26,"column":20}},{"name":"posts","generated":{"line":29,"column":0},"source":"js/main.js","original":{"line":27,"column":4}},{"name":"posts","generated":{"line":29,"column":4},"source":"js/main.js","original":{"line":27,"column":4}},{"generated":{"line":29,"column":9},"source":"js/main.js","original":{"line":27,"column":9}},{"name":"forEach","generated":{"line":29,"column":10},"source":"js/main.js","original":{"line":27,"column":10}},{"generated":{"line":29,"column":17},"source":"js/main.js","original":{"line":27,"column":4}},{"generated":{"line":29,"column":18},"source":"js/main.js","original":{"line":27,"column":19}},{"name":"post","generated":{"line":29,"column":28},"source":"js/main.js","original":{"line":27,"column":19}},{"generated":{"line":29,"column":32},"source":"js/main.js","original":{"line":27,"column":23}},{"generated":{"line":29,"column":34},"source":"js/main.js","original":{"line":27,"column":27}},{"name":"output","generated":{"line":30,"column":0},"source":"js/main.js","original":{"line":28,"column":6}},{"name":"output","generated":{"line":30,"column":6},"source":"js/main.js","original":{"line":28,"column":6}},{"generated":{"line":30,"column":12},"source":"js/main.js","original":{"line":28,"column":12}},{"name":"post","generated":{"line":30,"column":62},"source":"js/main.js","original":{"line":31,"column":14}},{"generated":{"line":30,"column":66},"source":"js/main.js","original":{"line":31,"column":18}},{"name":"title","generated":{"line":30,"column":67},"source":"js/main.js","original":{"line":31,"column":19}},{"generated":{"line":30,"column":72},"source":"js/main.js","original":{"line":28,"column":12}},{"name":"post","generated":{"line":30,"column":120},"source":"js/main.js","original":{"line":33,"column":12}},{"generated":{"line":30,"column":124},"source":"js/main.js","original":{"line":33,"column":16}},{"name":"body","generated":{"line":30,"column":125},"source":"js/main.js","original":{"line":33,"column":17}},{"generated":{"line":30,"column":129},"source":"js/main.js","original":{"line":28,"column":12}},{"generated":{"line":30,"column":155},"source":"js/main.js","original":{"line":28,"column":6}},{"generated":{"line":31,"column":0},"source":"js/main.js","original":{"line":35,"column":5}},{"generated":{"line":31,"column":5},"source":"js/main.js","original":{"line":27,"column":4}},{"name":"document","generated":{"line":32,"column":0},"source":"js/main.js","original":{"line":36,"column":4}},{"name":"document","generated":{"line":32,"column":4},"source":"js/main.js","original":{"line":36,"column":4}},{"generated":{"line":32,"column":12},"source":"js/main.js","original":{"line":36,"column":12}},{"name":"querySelector","generated":{"line":32,"column":13},"source":"js/main.js","original":{"line":36,"column":13}},{"generated":{"line":32,"column":26},"source":"js/main.js","original":{"line":36,"column":4}},{"generated":{"line":32,"column":27},"source":"js/main.js","original":{"line":36,"column":27}},{"generated":{"line":32,"column":35},"source":"js/main.js","original":{"line":36,"column":4}},{"name":"innerHTML","generated":{"line":32,"column":37},"source":"js/main.js","original":{"line":36,"column":37}},{"generated":{"line":32,"column":46},"source":"js/main.js","original":{"line":36,"column":4}},{"name":"output","generated":{"line":32,"column":49},"source":"js/main.js","original":{"line":36,"column":49}},{"generated":{"line":32,"column":55},"source":"js/main.js","original":{"line":36,"column":4}},{"generated":{"line":33,"column":0},"source":"js/main.js","original":{"line":37,"column":3}},{"generated":{"line":33,"column":3},"source":"js/main.js","original":{"line":26,"column":12}},{"generated":{"line":33,"column":5},"source":"js/main.js","original":{"line":37,"column":6}},{"generated":{"line":33,"column":9},"source":"js/main.js","original":{"line":26,"column":12}},{"generated":{"line":33,"column":10},"source":"js/main.js","original":{"line":26,"column":2}},{"generated":{"line":34,"column":0},"source":"js/main.js","original":{"line":38,"column":1}},{"generated":{"line":35,"column":0},"source":"js/main.js","original":{"line":41,"column":0}},{"generated":{"line":45,"column":0},"source":"js/main.js","original":{"line":50,"column":0}},{"name":"createPost","generated":{"line":45,"column":9},"source":"js/main.js","original":{"line":50,"column":9}},{"generated":{"line":45,"column":19},"source":"js/main.js","original":{"line":50,"column":0}},{"name":"post","generated":{"line":45,"column":20},"source":"js/main.js","original":{"line":50,"column":21}},{"generated":{"line":45,"column":24},"source":"js/main.js","original":{"line":50,"column":0}},{"generated":{"line":45,"column":26},"source":"js/main.js","original":{"line":50,"column":28}},{"generated":{"line":46,"column":0},"source":"js/main.js","original":{"line":51,"column":2}},{"generated":{"line":46,"column":9},"source":"js/main.js","original":{"line":51,"column":9}},{"name":"Promise","generated":{"line":46,"column":13},"source":"js/main.js","original":{"line":51,"column":13}},{"generated":{"line":46,"column":20},"source":"js/main.js","original":{"line":51,"column":9}},{"generated":{"line":46,"column":21},"source":"js/main.js","original":{"line":51,"column":22}},{"name":"resolve","generated":{"line":46,"column":31},"source":"js/main.js","original":{"line":51,"column":23}},{"generated":{"line":46,"column":38},"source":"js/main.js","original":{"line":51,"column":22}},{"name":"reject","generated":{"line":46,"column":40},"source":"js/main.js","original":{"line":51,"column":32}},{"generated":{"line":46,"column":46},"source":"js/main.js","original":{"line":51,"column":22}},{"generated":{"line":46,"column":48},"source":"js/main.js","original":{"line":51,"column":43}},{"name":"setTimeout","generated":{"line":47,"column":0},"source":"js/main.js","original":{"line":52,"column":4}},{"name":"setTimeout","generated":{"line":47,"column":4},"source":"js/main.js","original":{"line":52,"column":4}},{"generated":{"line":47,"column":14},"source":"js/main.js","original":{"line":52,"column":14}},{"generated":{"line":47,"column":15},"source":"js/main.js","original":{"line":52,"column":16}},{"generated":{"line":47,"column":27},"source":"js/main.js","original":{"line":52,"column":22}},{"name":"posts","generated":{"line":48,"column":0},"source":"js/main.js","original":{"line":53,"column":6}},{"name":"posts","generated":{"line":48,"column":6},"source":"js/main.js","original":{"line":53,"column":6}},{"generated":{"line":48,"column":11},"source":"js/main.js","original":{"line":53,"column":11}},{"name":"push","generated":{"line":48,"column":12},"source":"js/main.js","original":{"line":53,"column":12}},{"generated":{"line":48,"column":16},"source":"js/main.js","original":{"line":53,"column":6}},{"name":"post","generated":{"line":48,"column":17},"source":"js/main.js","original":{"line":53,"column":17}},{"generated":{"line":48,"column":21},"source":"js/main.js","original":{"line":53,"column":6}},{"generated":{"line":49,"column":0},"source":"js/main.js","original":{"line":55,"column":6}},{"name":"error","generated":{"line":49,"column":10},"source":"js/main.js","original":{"line":55,"column":12}},{"generated":{"line":49,"column":15},"source":"js/main.js","original":{"line":55,"column":17}},{"generated":{"line":49,"column":18},"source":"js/main.js","original":{"line":55,"column":20}},{"generated":{"line":49,"column":22},"source":"js/main.js","original":{"line":55,"column":6}},{"generated":{"line":51,"column":0},"source":"js/main.js","original":{"line":57,"column":6}},{"generated":{"line":51,"column":10},"source":"js/main.js","original":{"line":57,"column":9}},{"name":"error","generated":{"line":51,"column":11},"source":"js/main.js","original":{"line":57,"column":10}},{"generated":{"line":51,"column":16},"source":"js/main.js","original":{"line":57,"column":6}},{"generated":{"line":51,"column":18},"source":"js/main.js","original":{"line":57,"column":17}},{"name":"resolve","generated":{"line":52,"column":0},"source":"js/main.js","original":{"line":58,"column":8}},{"name":"resolve","generated":{"line":52,"column":8},"source":"js/main.js","original":{"line":58,"column":8}},{"generated":{"line":52,"column":15},"source":"js/main.js","original":{"line":58,"column":15}},{"generated":{"line":53,"column":0},"source":"js/main.js","original":{"line":59,"column":7}},{"generated":{"line":53,"column":7},"source":"js/main.js","original":{"line":57,"column":6}},{"generated":{"line":53,"column":13},"source":"js/main.js","original":{"line":59,"column":13}},{"name":"reject","generated":{"line":54,"column":0},"source":"js/main.js","original":{"line":60,"column":8}},{"name":"reject","generated":{"line":54,"column":8},"source":"js/main.js","original":{"line":60,"column":8}},{"generated":{"line":54,"column":14},"source":"js/main.js","original":{"line":60,"column":14}},{"generated":{"line":54,"column":15},"source":"js/main.js","original":{"line":60,"column":15}},{"generated":{"line":54,"column":37},"source":"js/main.js","original":{"line":60,"column":14}},{"generated":{"line":54,"column":38},"source":"js/main.js","original":{"line":60,"column":8}},{"generated":{"line":55,"column":0},"source":"js/main.js","original":{"line":61,"column":7}},{"generated":{"line":56,"column":0},"source":"js/main.js","original":{"line":62,"column":5}},{"generated":{"line":56,"column":5},"source":"js/main.js","original":{"line":52,"column":14}},{"generated":{"line":56,"column":7},"source":"js/main.js","original":{"line":62,"column":8}},{"generated":{"line":56,"column":11},"source":"js/main.js","original":{"line":52,"column":14}},{"generated":{"line":56,"column":12},"source":"js/main.js","original":{"line":52,"column":4}},{"generated":{"line":57,"column":0},"source":"js/main.js","original":{"line":63,"column":3}},{"generated":{"line":57,"column":3},"source":"js/main.js","original":{"line":51,"column":9}},{"generated":{"line":57,"column":4},"source":"js/main.js","original":{"line":51,"column":2}},{"generated":{"line":58,"column":0},"source":"js/main.js","original":{"line":64,"column":1}},{"generated":{"line":59,"column":0},"source":"js/main.js","original":{"line":67,"column":0}},{"name":"init","generated":{"line":71,"column":9},"source":"js/main.js","original":{"line":78,"column":15}},{"generated":{"line":76,"column":66},"source":"js/main.js","original":{"line":78,"column":0}},{"generated":{"line":77,"column":0},"source":"js/main.js","original":{"line":78,"column":0}},{"generated":{"line":78,"column":0},"source":"js/main.js","original":{"line":78,"column":0}},{"generated":{"line":79,"column":0},"source":"js/main.js","original":{"line":78,"column":0}},{"generated":{"line":80,"column":0},"source":"js/main.js","original":{"line":78,"column":0}},{"generated":{"line":81,"column":0},"source":"js/main.js","original":{"line":78,"column":0}},{"generated":{"line":82,"column":0},"source":"js/main.js","original":{"line":78,"column":0}},{"name":"createPost","generated":{"line":82,"column":19},"source":"js/main.js","original":{"line":80,"column":8}},{"generated":{"line":82,"column":29},"source":"js/main.js","original":{"line":80,"column":18}},{"generated":{"line":82,"column":30},"source":"js/main.js","original":{"line":80,"column":19}},{"name":"title","generated":{"line":83,"column":0},"source":"js/main.js","original":{"line":80,"column":21}},{"name":"title","generated":{"line":83,"column":14},"source":"js/main.js","original":{"line":80,"column":21}},{"generated":{"line":83,"column":19},"source":"js/main.js","original":{"line":80,"column":26}},{"generated":{"line":83,"column":21},"source":"js/main.js","original":{"line":80,"column":28}},{"generated":{"line":83,"column":31},"source":"js/main.js","original":{"line":80,"column":19}},{"name":"body","generated":{"line":84,"column":0},"source":"js/main.js","original":{"line":80,"column":40}},{"name":"body","generated":{"line":84,"column":14},"source":"js/main.js","original":{"line":80,"column":40}},{"generated":{"line":84,"column":18},"source":"js/main.js","original":{"line":80,"column":44}},{"generated":{"line":84,"column":20},"source":"js/main.js","original":{"line":80,"column":46}},{"generated":{"line":85,"column":0},"source":"js/main.js","original":{"line":80,"column":19}},{"generated":{"line":85,"column":13},"source":"js/main.js","original":{"line":80,"column":18}},{"generated":{"line":85,"column":14},"source":"js/main.js","original":{"line":80,"column":8}},{"generated":{"line":85,"column":15},"source":"js/main.js","original":{"line":81,"column":4}},{"generated":{"line":86,"column":0},"source":"js/main.js","original":{"line":80,"column":8}},{"name":"catch","generated":{"line":86,"column":13},"source":"js/main.js","original":{"line":82,"column":5}},{"generated":{"line":86,"column":18},"source":"js/main.js","original":{"line":80,"column":8}},{"generated":{"line":86,"column":19},"source":"js/main.js","original":{"line":82,"column":12}},{"name":"e","generated":{"line":86,"column":29},"source":"js/main.js","original":{"line":82,"column":12}},{"generated":{"line":86,"column":30},"source":"js/main.js","original":{"line":82,"column":13}},{"generated":{"line":87,"column":0},"source":"js/main.js","original":{"line":82,"column":13}},{"name":"console","generated":{"line":87,"column":21},"source":"js/main.js","original":{"line":82,"column":17}},{"generated":{"line":87,"column":28},"source":"js/main.js","original":{"line":82,"column":24}},{"name":"error","generated":{"line":87,"column":29},"source":"js/main.js","original":{"line":82,"column":25}},{"generated":{"line":87,"column":34},"source":"js/main.js","original":{"line":82,"column":17}},{"generated":{"line":87,"column":35},"source":"js/main.js","original":{"line":82,"column":32}},{"name":"e","generated":{"line":87,"column":47},"source":"js/main.js","original":{"line":82,"column":44}},{"generated":{"line":87,"column":48},"source":"js/main.js","original":{"line":82,"column":17}},{"generated":{"line":87,"column":49},"source":"js/main.js","original":{"line":82,"column":13}},{"generated":{"line":88,"column":0},"source":"js/main.js","original":{"line":82,"column":13}},{"generated":{"line":88,"column":13},"source":"js/main.js","original":{"line":80,"column":8}},{"generated":{"line":88,"column":14},"source":"js/main.js","original":{"line":78,"column":0}},{"generated":{"line":90,"column":0},"source":"js/main.js","original":{"line":78,"column":0}},{"name":"getPosts","generated":{"line":91,"column":0},"source":"js/main.js","original":{"line":84,"column":2}},{"name":"getPosts","generated":{"line":91,"column":12},"source":"js/main.js","original":{"line":84,"column":2}},{"generated":{"line":91,"column":20},"source":"js/main.js","original":{"line":84,"column":10}},{"generated":{"line":93,"column":0},"source":"js/main.js","original":{"line":78,"column":0}},{"generated":{"line":94,"column":0},"source":"js/main.js","original":{"line":78,"column":0}},{"generated":{"line":95,"column":0},"source":"js/main.js","original":{"line":78,"column":0}},{"generated":{"line":96,"column":0},"source":"js/main.js","original":{"line":78,"column":0}},{"generated":{"line":97,"column":0},"source":"js/main.js","original":{"line":78,"column":0}},{"generated":{"line":98,"column":0},"source":"js/main.js","original":{"line":78,"column":0}},{"generated":{"line":99,"column":0},"source":"js/main.js","original":{"line":78,"column":0}},{"name":"init","generated":{"line":103,"column":0},"source":"js/main.js","original":{"line":87,"column":0}},{"generated":{"line":103,"column":4},"source":"js/main.js","original":{"line":87,"column":4}},{"generated":{"line":103,"column":8},"source":"js/main.js","original":{"line":91,"column":0}},{"generated":{"line":104,"column":0},"source":"js/main.js","original":{"line":92,"column":0}},{"generated":{"line":105,"column":0},"source":"js/main.js","original":{"line":93,"column":0}},{"generated":{"line":107,"column":0},"source":"js/main.js","original":{"line":95,"column":0}},{"generated":{"line":112,"column":0},"source":"js/main.js","original":{"line":102,"column":0}},{"generated":{"line":113,"column":0},"source":"js/main.js","original":{"line":103,"column":0}},{"generated":{"line":114,"column":0},"source":"js/main.js","original":{"line":104,"column":0}},{"generated":{"line":116,"column":0},"source":"js/main.js","original":{"line":106,"column":0}},{"generated":{"line":126,"column":0},"source":"js/main.js","original":{"line":116,"column":0}},{"generated":{"line":127,"column":0},"source":"js/main.js","original":{"line":117,"column":0}},{"generated":{"line":128,"column":0},"source":"js/main.js","original":{"line":118,"column":0}},{"generated":{"line":129,"column":0},"source":"js/main.js","original":{"line":122,"column":0}},{"generated":{"line":130,"column":0},"source":"js/main.js","original":{"line":123,"column":0}},{"generated":{"line":131,"column":0},"source":"js/main.js","original":{"line":124,"column":0}},{"generated":{"line":133,"column":0},"source":"js/main.js","original":{"line":127,"column":2}}],"sources":{"js/main.js":"/**\r\n * \r\n *  OVERVIEW\r\n * \r\n *  Async Await is a more elegant way to handle responses\r\n *  It's not a way to write the functions for them so  \r\n *  createPost() remains the same \r\n * \r\n */\r\n\r\n// Init array to store posts\r\nconst posts = [];\r\n\r\n/**\r\n * \r\n *  EXACTLY SAME CODE AS BEFORE (PROMISES)\r\n * \r\n *  1) Loops thru posts[] grabbing its properties\r\n *  2) Stores each post to output\r\n *  3) Dom renders renders HTML output to screen\r\n * \r\n */\r\n\r\nfunction getPosts() {\r\n  let output = ``;\r\n  setTimeout( () => {\r\n    posts.forEach( post => {\r\n      output += \r\n        `<li>\r\n          <span>\r\n            ${post.title}\r\n          </span><BR>\r\n          ${post.body}<BR>\r\n          </li>`;\r\n    });\r\n    document.querySelector('#posts').innerHTML = output;\r\n  } , 1000);\r\n}\r\n\r\n\r\n/**\r\n *  \r\n *  EXACTLY SAME CODE AS BEFORE (PROMISES)\r\n * \r\n *  Writing Async / Await functions remain the same\r\n *  Only the way we handle the response changes\r\n *  \r\n */\r\n\r\nfunction createPost( post ) {\r\n  return new Promise( (resolve, reject) => { \r\n    setTimeout( () => {\r\n      posts.push(post);\r\n\r\n      const error = true;\r\n\r\n      if(!error) {\r\n        resolve();\r\n      } else {\r\n        reject('something went wrong' );\r\n      }\r\n    } , 2000);\r\n  });\r\n}\r\n  \r\n\r\n/**\r\n *  \r\n *  ASYNC / AWAIT \r\n * \r\n *  1) async and await are used together\r\n *  2) async keyword is required in front of a function declaration to turn it into an async function\r\n *  3) await waits for an asynchronous process to complete \r\n *  4) then() nolonger is chained like it is for a promise\r\n * \r\n */\r\n\r\nasync function init() {\r\n  // await for createPost() to complete before we call getPosts()\r\n  await createPost({ title: 'Post One', body: 'This is post one' })\r\n    // Traversy never used the catch but it appears they can be used together\r\n    .catch( e => console.error( 'Error: ' + e ));\r\n\r\n  getPosts();\r\n} \r\n\r\ninit();\r\n\r\n\r\n\r\n// createPost({ title: 'Post Seven', body: 'This is post seven' } )\r\n//   .then( getPosts )\r\n//   .catch( e => console.error( Error(e) ));\r\n\r\n/**\r\n *  PART 2: Promise.all( [promise1, promise2, etc.] ) \r\n * \r\n *  Accepts an array\r\n */\r\n\r\n\r\n//  const promise1 = Promise.resolve('Hello World');\r\n//  const promise2 = 12345;\r\n//  const promise3 = new Promise( (resolve, reject) => setTimeout(resolve, 3250, 'Adios Amigo!') );\r\n\r\n/**\r\n *  PART 4: fetch()\r\n * \r\n *  res is common shorthand for response\r\n * \r\n *  IMPORTANT: fetch alone only returns info about the function that is used\r\n *  to format JSON. It still works but doesn't return the info we're after\r\n *  To parse it to be readable we must chani .then()\r\n * \r\n */\r\n//  const promise4 = fetch\r\n//     ('https://jsonplaceholder.typicode.com/users')\r\n//         .then(  res => res.json() );\r\n    \r\n\r\n\r\n//  // Takes however long the longest promise is to return all the values which is 3250\r\n//  Promise.all([ promise1, promise2, promise3, promise4 ])\r\n//   .then( (values) => console.log(values));\r\n\r\n\r\n  /**\r\n   *  PART 4: fetch\r\n   * \r\n   *  Need to chain 2 fetches in a row to use fetch\r\n   */\r\n\r\n\r\n"},"lineCount":null}},"error":null,"hash":"acf6024d72b6eff59e3e7671c6e17bfa","cacheData":{"env":{}}}