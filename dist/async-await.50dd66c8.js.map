{"version":3,"sources":["js/async-await.js"],"names":["posts","getPosts","output","setTimeout","forEach","post","title","body","document","querySelector","innerHTML","createPost","Promise","resolve","reject","push","error","init","catch","e","console"],"mappings":";;;;AAAA;;;;;;;;;AAUA;AACA,IAAMA,KAAK,GAAG,EAAd;AAEA;;;;;;;;;;AAUA,SAASC,QAAT,GAAoB;AAClB,MAAIC,MAAM,KAAV;AACAC,EAAAA,UAAU,CAAE,YAAM;AAChBH,IAAAA,KAAK,CAACI,OAAN,CAAe,UAAAC,IAAI,EAAI;AACrBH,MAAAA,MAAM,kDAGEG,IAAI,CAACC,KAHP,gDAKAD,IAAI,CAACE,IALL,0BAAN;AAOD,KARD;AASAC,IAAAA,QAAQ,CAACC,aAAT,CAAuB,QAAvB,EAAiCC,SAAjC,GAA6CR,MAA7C;AACD,GAXS,EAWN,IAXM,CAAV;AAYD;AAED;;;;;;;;;;AASA,SAASS,UAAT,CAAqBN,IAArB,EAA4B;AAC1B,SAAO,IAAIO,OAAJ,CAAa,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACvCX,IAAAA,UAAU,CAAE,YAAM;AAChBH,MAAAA,KAAK,CAACe,IAAN,CAAWV,IAAX;AAEA,UAAMW,KAAK,GAAG,KAAd;;AAEA,UAAG,CAACA,KAAJ,EAAW;AACTH,QAAAA,OAAO;AACR,OAFD,MAEO;AACLC,QAAAA,MAAM,CAAC,sBAAD,CAAN;AACD;AACF,KAVS,EAUN,IAVM,CAAV;AAWD,GAZM,CAAP;AAaD;AAGD;;;;;;;;;;;;SAWeG;;EASf;;;;kEATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEQN,UAAU,CAAC;AAAEL,cAAAA,KAAK,EAAE,UAAT;AAAqBC,cAAAA,IAAI,EAAE;AAA3B,aAAD,CAAV,CACJ;AADI,aAEHW,KAFG,CAEI,UAAAC,CAAC;AAAA,qBAAIC,OAAO,CAACJ,KAAR,CAAe,YAAYG,CAA3B,CAAJ;AAAA,aAFL,CAFR;;AAAA;AAMElB,YAAAA,QAAQ;;AANV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAUAgB,IAAI","file":"async-await.50dd66c8.js","sourceRoot":"..","sourcesContent":["/**\r\n * \r\n *  OVERVIEW\r\n * \r\n *  Async Await is a more elegant way to handle responses\r\n *  It's not a way to write the functions for them so  \r\n *  createPost() remains the same \r\n * \r\n */\r\n\r\n// Init array to store posts\r\nconst posts = [];\r\n\r\n/**\r\n * \r\n *  EXACTLY SAME CODE AS BEFORE (PROMISES)\r\n * \r\n *  1) Loops thru posts[] grabbing its properties\r\n *  2) Stores each post to output\r\n *  3) Dom renders renders HTML output to screen\r\n * \r\n */\r\n\r\nfunction getPosts() {\r\n  let output = ``;\r\n  setTimeout( () => {\r\n    posts.forEach( post => {\r\n      output += \r\n        `<li>\r\n          <span>\r\n            ${post.title}\r\n          </span><BR>\r\n          ${post.body}<BR>\r\n          </li>`;\r\n    });\r\n    document.querySelector('#posts').innerHTML = output;\r\n  } , 1000);\r\n}\r\n\r\n/**\r\n *  \r\n *  EXACTLY SAME CODE AS BEFORE (PROMISES)\r\n * \r\n *  Writing Async / Await functions remain the same\r\n *  Only the way we handle the response changes\r\n *  \r\n */\r\n\r\nfunction createPost( post ) {\r\n  return new Promise( (resolve, reject) => { \r\n    setTimeout( () => {\r\n      posts.push(post);\r\n\r\n      const error = false;\r\n\r\n      if(!error) {\r\n        resolve();\r\n      } else {\r\n        reject('something went wrong' );\r\n      }\r\n    } , 2000);\r\n  });\r\n}\r\n  \r\n\r\n/**\r\n *  \r\n *  ASYNC / AWAIT \r\n * \r\n *  1) async and await are used together\r\n *  2) async keyword is required in front of a function declaration to turn it into an async function\r\n *  3) await waits for an asynchronous process to complete \r\n *  4) then() nolonger is chained like it is for a promise\r\n * \r\n */\r\n\r\nasync function init() {\r\n  // await for createPost() to complete before we call getPosts()\r\n  await createPost({ title: 'Post One', body: 'This is post one' })\r\n    // Traversy never used the catch but it appears they can be used together\r\n    .catch( e => console.error( 'Error: ' + e ));\r\n\r\n  getPosts();\r\n} \r\n\r\n// Invoke function to grab user list\r\ninit();"]}